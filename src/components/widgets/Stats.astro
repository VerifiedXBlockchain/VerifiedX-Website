---
import type { Stats as Props } from '~/types';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';

const { stats = [], id, isDark = false, classes = {}, bg = await Astro.slots.render('bg') } = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-6xl mx-auto mt-0 pt-0 md:pt-0 lg:pt-0  ${classes?.container ?? ''}`}
  bg={bg}
>
  <div class="flex items-stretch justify-center">
    <div class="grid grid-cols-3 gap-6 dark:text-white sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3">
      {
        stats &&
          stats.map(({ title, subtitle, value, metric, ctaHref, ctaTitle, gradientDirection }) => (
            <div class="col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
              <div
                class="rounded-lg border border-gray-400 border-solid  border-1 fun-gradient  px-6 py-8 flex w-full max-w-sm flex-col justify-between text-center transition-transform transform hover:scale-105 hover:shadow-none "
                style={`box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.3); --gradient-direction: ${gradientDirection}`}
              >
                <div class="px-2 py-0">
                  <h3 class="text-center text-xl font-semibold uppercase leading-6 tracking-wider mb-2 text-white">
                    {title}
                  </h3>
                  {subtitle && <p class="font-light sm:text-lg text-gray-200 dark:text-slate-300">{subtitle}</p>}
                  <div class="mt-4">
                    <div class="flex items-center justify-center text-center mb-1">
                      <span class="text-5xl font-semibold text-white drop-shadow-lg">{value}</span>
                    </div>
                    {metric && (
                      <span class="text-base inline-block  mt-2 text-white font-semibold tracking-wider">{metric}</span>
                    )}
                  </div>

                  {ctaTitle && ctaHref && (
                    <a
                      href={ctaHref}
                      target="_blank"
                      class="border border-1 inline-block mt-3 border-white text-white font-semibold tracking-wider py-1 px-3 text-sm rounded-full hover:text-black  transition ease-in-out hover:bg-white"
                    >
                      {ctaTitle}
                    </a>
                  )}
                </div>
              </div>
            </div>
          ))
      }
    </div>
  </div>
</WidgetWrapper>
